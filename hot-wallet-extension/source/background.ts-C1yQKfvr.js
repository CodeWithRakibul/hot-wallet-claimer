import{b as t}from"./browser-polyfill-CP3dh7Ce.js";import{aV as y}from"./HereRpcProvider-DB0GBsdb.js";const f={sidePanel:!1},C=async({sidePanel:e})=>{f.sidePanel=e,await t.storage.local.set({settings:f})};t.storage.local.get("settings").then(e=>{f.sidePanel=e.settings?.sidePanel??f.sidePanel});t.storage.local.onChanged.addListener(e=>{e.settings&&(f.sidePanel=e.settings.newValue?.sidePanel??f.sidePanel)});let l=[];t.windows.onFocusChanged.addListener(async e=>{(await t.windows.get(e)).type==="normal"&&(l=l.filter(r=>r!==e),l.push(e))});t.windows.onRemoved.addListener(e=>{l=l.filter(n=>n!==e)});t.windows.getAll().then(e=>{const n=e.filter(a=>a.type==="normal"&&a.focused);l=[...e.filter(a=>a.type==="normal"&&!a.focused).map(a=>a.id),...n.map(a=>a.id)]});const L=(e,n)=>{if(!e){chrome.sidePanel?.setPanelBehavior({openPanelOnActionClick:!1}),C({sidePanel:!1}),M();return}chrome.sidePanel!=null&&l[l.length-1]&&(C({sidePanel:!0}),t.tabs.remove(n),chrome.sidePanel?.setPanelBehavior({openPanelOnActionClick:!0}),chrome.sidePanel?.open({windowId:l[l.length-1]}))},M=async()=>{let e,n;try{if(!l[l.length-1])throw"No window";const r=await t.windows.get(l[l.length-1]);e=(r.left||0)+(r.width||0)-400-16,n=(r.top||0)+100}catch(r){console.log("OPEN WALLET AS WINDOW",r)}try{const a=(await t.tabs.query({})).find(i=>i.url?.includes(`${t.runtime.id}/frame.html`));if(a)return t.windows.update(a.windowId,{focused:!0,width:400,height:640,left:e,top:n})}catch{}await t.windows.create({url:t.runtime.getURL("frame.html"),type:"popup",focused:!0,width:400,height:640,left:e,top:n})},A=async e=>{try{if(!f.sidePanel)throw"Try to open popup";try{await t.sidePanel.open({windowId:e})}catch{if(!await T("exist",500))throw"Try to open popup"}}catch{await M(),await T("exist")}},T=async(e,n=3e3)=>{const r=`${Math.random()}.${Math.random()}`;t.runtime.sendMessage({id:r,$hot:"wallet:ping",method:e});const a=setInterval(()=>{t.runtime.sendMessage({id:r,$hot:"wallet:ping",method:e})},500);return new Promise(i=>{const w=p=>{console.log("FROM WALLET",p),!(p.id!==r||p.$hot!=="wallet:pong")&&p.value===e&&(t.runtime.onMessage.removeListener(w),clearInterval(a),clearTimeout(g),i(!0))},g=setTimeout(()=>{t.runtime.onMessage.removeListener(w),clearTimeout(a),i(!1)},n);t.runtime.onMessage.addListener(w)})};let h={};t.storage.local.get("connectedApps").then(e=>{h=e.connectedApps||{}});t.storage.local.onChanged.addListener(e=>{h=e.connectedApps?.newValue??h});const P=async({origin:e,evm:n,solana:r,ton:a,near:i})=>{h=(await t.storage.local.get("connectedApps")).connectedApps||{},h[e]==null&&(h[e]={}),(n===null||n)&&(h[e].evm=n),(a===null||a)&&(h[e].ton=a),(i===null||i)&&(h[e].near=i),(r===null||r)&&(h[e].solana=r),await t.storage.local.set({connectedApps:h})},O=e=>h[e]||{ton:null,near:null,evm:null,solana:null},x=async()=>{try{t.scripting.registerContentScripts([{id:"evm-provider",matches:["file://*/*","http://*/*","https://*/*"],js:["extension-scripts/index.js"],runAt:"document_start",world:"MAIN",allFrames:!0},{id:"solana-provider",matches:["file://*/*","http://*/*","https://*/*"],js:["extension-scripts/solana.js"],runAt:"document_start",world:"MAIN",allFrames:!0}])}catch(e){console.error(e)}};x();t.storage.local.get("disableSidePanel").then(({disableSidePanel:e})=>{if(e){t.sidePanel?.setOptions({enabled:!1}),t.action.setPopup({popup:"index.html"});return}t.action.setPopup({popup:""}),t.sidePanel?.setOptions({path:"index.html",enabled:!0}),t.action.onClicked.addListener(n=>A(n.windowId))});t.runtime.onInstalled.addListener(async()=>{t.contextMenus.create({id:"openHotWallet",title:"Open HOT Wallet",contexts:["all"]}),!(await t.storage.local.get("installed")).installed&&(t.storage.local.set({installed:!0}),t.tabs.create({url:t.runtime.getURL("index.html?installed")}))});t.contextMenus.onClicked.addListener((e,n)=>{e.menuItemId==="openHotWallet"&&n?.windowId!=null&&A(n.windowId)});const I={};t.runtime.onMessage.addListener((e,n,r)=>{if(e.$hot==="toggleSidePanel")return L(e.value,n?.tab?.id),r(!0),!0;if(e.$hot==="isSiteConnectionType")return y.initializeTask.then(()=>{const a=n?.tab?.id;if(a)return t.tabs.sendMessage(a,{$hot:"setupSiteConnectionType",value:y.isConnectionType(e.origin)}),r(!0),!0});if(e.$hot==="openWallet")return A(n?.tab?.windowId),r(!0),!0;t.storage.local.get("browser").then(({browser:a})=>{if(!a){if(t.storage.local.set({browser:e.value}),e.value==="chrome"){t.sidePanel.setOptions({enabled:!0}),t.sidePanel.setPanelBehavior({openPanelOnActionClick:!0}),C({sidePanel:!0});return}t.storage.local.set({disableSidePanel:!0}),t.sidePanel.setOptions?.({enabled:!1,path:""}),t.sidePanel.setPanelBehavior?.({openPanelOnActionClick:!1}),e.value==="arc"&&t.runtime.reload()}})});let b=Promise.resolve();t.runtime.onMessage.addListener(async(e,n)=>{await y.initializeTask;try{const{id:r,$hot:a,request:i,method:w,origin:g}=e,p=n?.tab?.id;if(!p)return;const o=async c=>{console.log("sendSuccessResult",c),await t.tabs.sendMessage(p,{payload:c,$hot:"response:success",method:w,id:r})},u=async c=>{console.log("sendSuccessResult",c),await t.tabs.sendMessage(p,{payload:c,$hot:"response:failed",request:i,method:w,id:r})},v=async(c,d)=>{await t.tabs.sendMessage(p,{$hot:"signal",event:c,payload:d})},m=async()=>{b&&await b,b=A(n.tab.windowId).catch(()=>{});try{await b,await T("wallet:ready"),await t.runtime.sendMessage({$hot:"wallet:request",icon:n?.tab?.favIconUrl,request:e.request,method:e.method,origin:e.origin,context:e.context,id:e.id,tabId:p})}catch(c){console.error(c),u(c)}},_=c=>new Promise(d=>setTimeout(d,c)),s=O(g);if(a==="unsubscribe")return;if(a==="subscribe"&&e.event==="evm:connect"&&_(500).then(()=>s.evm&&v("evm:connect",s.evm.address)),a==="request")switch(w){case"ton:restoreConnection":return s.ton?o({id:"0",event:"connect",payload:{device:{maxProtocolVersion:2,features:["SendTransaction",{name:"SendTransaction",maxMessages:4}],platform:"browser",appVersion:"1",appName:"hot"},items:s.ton.items}}):u("Connect TON");case"ton:connect":return m();case"ton:send":return i.method==="disconnect"?(P({origin:g,ton:null}),o(null)):s.ton?m():u("Connect TON");case"solana:connect":return s.solana?o({publicKey:s.solana.address}):m();case"solana:disconnect":return P({origin:g,solana:null}),v("solana:disconnect",null),o(null);case"solana:signIn":return s.solana?o({publicKey:s.solana.address}):m();case"solana:signAndSendTransaction":case"solana:signAllTransactions":case"solana:signMessage":return s.solana?m():u("Connect Solana");case"near:getAccounts":return s.near?o([{accountId:s.near.address,publicKey:s.near.publicKey}]):u("Connect NEAR");case"near:signOut":return P({origin:g,near:null}),v("near:signedOut",null),o(null);case"near:hereConnect":case"near:signIn":case"near:signAndSendTransactions":case"near:signAndSendTransaction":case"near:signMessage":return m();case"stellar:signAuthEntry":return u({code:-3,message:'Albedo does not support the "signAuthEntry" function'});case"stellar:getAddress":case"stellar:signTransaction":case"stellar:signMessage":return m();case"ethereum":switch(i.method){case"eth_accounts":return o(s.evm?.address?[s.evm.address]:[]);case"net_version":return o(s.evm?.chain||1);case"eth_chainId":return o(s.evm?"0x"+s.evm.chain.toString(16):"0x1");case"wallet_revokePermissions":return P({origin:g,evm:null}),v("evm:disconnect",null),o(null);case"wallet_requestPermissions":return o({eth_accounts:{}});case"eth_requestAccounts":return s.evm?.address?o([s.evm.address]):await m();case"wallet_switchEthereumChain":{const d=parseInt(i.params[0]?.chainId||i.params[0],16);return s.evm?.address?(await P({origin:g,evm:{...s.evm,chain:d}}),await v("evm:chainChanged",d),o(null)):u("Connect EVM")}case"wallet_watchAsset":return s.evm?.chain?await m():u("Connect EVM");case"wallet_addEthereumChain":{const d=parseInt(i.params[0].chainId,16);return y.chains.find(S=>S.id===d)?(await P({origin:g,evm:{address:s.evm?.address||"",chain:d}}),await v("evm:chainChanged",d),o(null)):u("Unsupported chain")}case"eth_sendTransaction":case"eth_signTransaction":case"eth_signTypedData":case"eth_signTypedData_v3":case"eth_signTypedData_v4":case"personal_sign":return s.evm?.address?m():u("Connect EVM");default:{if(!s.evm?.address)return u("Connect EVM");const d=I[s.evm.chain]||y.createEvmProvider(y.get(s.evm.chain));I[s.evm.chain]=d,d.send(i.method,i.params).then(o).catch(u)}}}}catch{}});
